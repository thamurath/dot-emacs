;;================================================
;; Modificaciones generales 
;;===============================================
;; con la siguiente linea a;adimos el directorio y todos los subdirectorios.
(progn (cd "/home/eojojos/Varios/emacs") (normal-top-level-add-subdirs-to-load-path))

;; Ponemos el tema de color que queremos
(require 'color-theme)
(eval-after-load "color-theme"
  '(progn
     (color-theme-initialize)
                                        ;(color-theme-gruber-darker)))
     (color-theme-zenburn)))

;; esto es para que se active el resaltado de codigo para todos los modos en los que este disponible
(setq global-font-lock-mode t)
;; Set maximum level of font decoration
(setq font-lock-maximum-decoration
      '(
        (c-mode . 3) 
        (c++-mode . 3)
        (python-mode . 3) 
        )
      )
;;Ilumina la linea actual
(global-hl-line-mode 1)
;;Para activar el realzado de las coincidencias encontradas hasta el momento en las búsquedas, 
;;debemos poner las siguientes sentencias:
(setq search-highlight t)
(setq query-replace-highlight t)

;; Dont make backup files
(setq make-backup-files nil) ;disable backup
(setq backup-inhibited t)
(setq auto-save-list-file-prefix "~/.emacs-saves/.saves-")
(setq auto-save-default nil)


;; con esto deberia poner los numeros de linea 
(global-linum-mode 1) 
(setq linum-format "%d ") ; esto deberia poner un espacio detras del numero

;; Esto se supone que es para que resalte los pares de parentesis y esas cosas
(require 'paren)
(show-paren-mode 1)

;; para que la "campana" sea visual
(setq visible-bell 1)
;; no añade lineas vacías al final
(setq next-line-add-newlines nil)

;; Para que se muestre la hora en la barra de estado en formato 24h
(setq display-time-day-and-date t)
(setq display-time-interval 30)
(setq display-time-24hr-format t)
;; Para que se muestre el tiempo en la barra de estado ( o modo)
;; OJO -> Primero hay que modificar las variables que afecten al modo y luego activarlo!!!
(display-time-mode t)


;; Makes final line always be a return
(setq require-final-newline t)

;; deleting files goes to OS's trash folder
(setq delete-by-moving-to-trash t) ; "t" for true, "nil" for false
;; Make copy and paste to work with other programs
(setq x-select-enable-clipboard t)
(setq interprogram-paste-function 'x-cut-buffer-or-selection-value)

;; keybindings para hacer que C-w borre la palabra anterior.
;; De esta manera no tenemos que tocar el delete casi nunca.
;; C-w esta por defecto puesto para kill-region, por eso remapeamos esta tb.
;; Nota: en los shell C-w borra la palabra anterior tb, asi que no esta tan mal
(global-set-key "\C-w" 'backward-kill-word)
(global-set-key "\C-x\C-k" 'kill-region)
(global-set-key "\C-c\C-k" 'kill-region)



;;Modificaciones para que C-a te lleve al primer caracter no blanco de la linea
;;y que cuando lo presiones dos veces si que te lleve al primer caracter de la linea.

;; navigation

(defun heretic/real-line-beginning()
  (let ((c (char-after (line-beginning-position)))
        (n (line-beginning-position)))
    (while (or (eql c ?\ )
               (eql c ?\t))
      (incf n)
      (setq c (char-after n)))
    n))
(defun heretic/goto-alternate-line-beginning()
  (interactive)
  (let ((n (heretic/real-line-beginning)))
    (if (eql n (point))
        (goto-char (line-beginning-position))
      (goto-char n))))
;; Mapeamos C-a a la nueva funcion
(global-set-key  "\C-a" 'heretic/goto-alternate-line-beginning)

;; Esto es para que te lleve al parentesis o la llave que matche con esta 
(global-set-key "%" 'match-paren)
(defun match-paren (arg)
  "Go to the matching paren if on a paren; otherwise insert %."
  (interactive "p")
  (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
        ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
        (t (self-insert-command (or arg 1)))))




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SCROLL
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; ;;Scrolling without moving the cursor can be achieved by the functions:
;;   (defun scroll-down-keep-cursor () 
;;     ;; Scroll the text one line down while keeping the cursor 
;;     (interactive) 
;;     (scroll-down 1)) 

;;   (defun scroll-up-keep-cursor () 
;;     ;; Scroll the text one line up while keeping the cursor 
;;     (interactive) 
;;     (scroll-up 1)) 
;;   ;;Bind the functions to the /-key and the *-key (on the numeric keypad) with:
;;   ; Estas teclas no funcionan bien con un terminal porque me salen teclas de funcion 
;;   ;(global-set-key [kp-divide] 'scroll-down-keep-cursor) 
;;   ;(global-set-key [kp-multiply] 'scroll-up-keep-cursor) 




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;Autofill mode
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;Cuando escribimos un fichero fuente o cuando escribimos un fichero de texto suele ser interesante que el editor decida 
;;cuando no caben más palabras en en la línea actual y pase a la siguiente. Esta funcionalidad en emacs se conoce como 
;;"auto-fill". Con la siguiente sentencia indicamos que la columna donde deben terminar las líneas es la 80 y que debe 
;;activar el modo "auto-fill" para todos los modos derivados del modo de texto y en los modos para C y C++:
(setq default-fill-column 80)
;; con esto pondriamos el modo activo para todos
;; (setq auto-fill-mode 1)
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'c++-mode-hook 'turn-on-auto-fill)
(add-hook 'c-mode-hook 'turn-on-auto-fill)

;;Por defecto en emacs, si vamos al final del fichero y pulsamos el cursor para ir hacia abajo emacs introduce un 
;;salto de linea, pero a veces este comportamiento no es el deseado. Con la siguiente sentencia podemos evitarlo:
;; no añade lineas vacías al final
(setq next-line-add-newlines nil)

;; para que la indentacion estandar sea de 2 espacios
(setq standard-indent 2)
;; Espacios en vez de tabuladores
(setq-default indent-tabs-mode nil) ;; nota:setq-default solo modifica el valor de la variable en los buffers que no tienen un valor para ella.














;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Autopair configuration
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'autopair)
(autopair-global-mode) ;; to enable in all buffers
(setq autopair-autowrap t) ;;Esto es para que ponga el delimitador alrededor de una palabra que tengamos seleccionada.
(setq autopair-blink t) 

;; Nuevos caracteres para hacer autopair en c++ ( solo en codigo )
(add-hook 'c-mode-common-hook
          #'(lambda ()
              (push '(?< . ?>)
                    (getf autopair-extra-pairs :code))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Autocompletado hippie e ido
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(global-set-key "\M-_ " 'hippie-expand)
;; ido makes competing buffers and finding files easier
;; http://www.emacswiki.org/cgi-bin/wiki/InteractivelyDoThings
(require 'ido) 
(ido-mode 'both) ;; for buffers and files
(setq 
 ido-save-directory-list-file "~/.emacs.d/ido.last"

 ido-ignore-buffers ;; ignore these guys
 '("\\` " "^\*Mess" "^\*Back" ".*Completion" "^\*Ido" "^\*trace"

   "^\*compilation" "^\*GTAGS" "^session\.*" "^\*")
 ido-work-directory-list '("~/" "~/Desktop" "~/Documents" "~src")
 ido-case-fold  t                 ; be case-insensitive

 ido-enable-last-directory-history t ; remember last used dirs
 ido-max-work-directory-list 30   ; should be enough
 ido-max-work-file-list      50   ; remember many
 ido-use-filename-at-point nil    ; don't use filename at point (annoying)
 ido-use-url-at-point nil         ; don't use url at point (annoying)

 ido-enable-flex-matching nil     ; don't try to be too smart
 ido-max-prospects 8              ; don't spam my minibuffer
 ido-confirm-unique-completion t) ; wait for RET, even with unique completion

;; when using ido, the confirmation is rather annoying...
(setq confirm-nonexistent-file-or-buffer nil)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Highlight symbols
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Para poder simular las busquedas de palabras bajo el cursor. Resalta la busqueda actual
(require 'highlight-symbol)
;; TODO: asignarle teclas a las funciones siguientes.

                                        ;Use C-f3 to toggle highlighting of the symbol at point throughout the current buffer. 
                                        ;Use highlight-symbol-mode to keep the symbol at point always highlighted.
                                        ;The functions highlight-symbol-next, highlight-symbol-prev, highlight-symbol-next-in-defun and
                                        ; highlight-symbol-prev-in-defun allow for cycling through the locations of any symbol at point. 
                                        ;When highlight-symbol-on-navigation-p is set, highlighting is triggered regardless of highlight-symbol-idle-delay.



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; AStyle
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Esta es una funcion para poder usar astyle dentro de emacs
(defun astyle-this-buffer (pmin pmax)
  (interactive "r")
  (shell-command-on-region pmin pmax
                           "astyle" ;; add options here...
                           (current-buffer) t 
                           (get-buffer-create "*Astyle Errors*") t)
  )



;;;;============================================
  ;;;; Visual bookmarks
  ;;;;============================================
(add-to-list 'load-path "/home/eojojos/emacs-dir/visualBookmarks")

;; Persistence
;; make bookmarks persistent as default
(setq-default bm-buffer-persistence t)

;; Make sure the repository is loaded as early as possible
(setq bm-restore-repository-on-load t)
(require 'bm)
;; Configuration TODO: Asignar teclas a estas funciones
                                        ;(global-set-key (kbd "<C-f2>") 'bm-toggle)
                                        ;(global-set-key (kbd "<f2>")   'bm-next)
                                        ;(global-set-key (kbd "<S-f2>") 'bm-previous)

;; Loading the repository from file when on start up.
(add-hook' after-init-hook 'bm-repository-load)

;; Restoring bookmarks when on file find.
(add-hook 'find-file-hooks 'bm-buffer-restore)

;; Saving bookmark data on killing a buffer
(add-hook 'kill-buffer-hook 'bm-buffer-save)

;; Saving the repository to file when on exit.
;; kill-buffer-hook is not called when Emacs is killed, so we
;; must save all bookmarks first.
(add-hook 'kill-emacs-hook '(lambda nil
                              (bm-buffer-save-all)
                              (bm-repository-save)))

;; Update bookmark repository when saving the file.
(add-hook 'after-save-hook 'bm-buffer-save)

;; Restore bookmarks when buffer is reverted.
(add-hook 'after-revert-hook 'bm-buffer-restore)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; uniquify!
;;;(es una herramienta para hacer que los nombres de los buffers cuyos nombers
;;;de fichero son iguales, sean mas descriptivos.
;;;Ej: Tenemos abiertos /NSdiametercom/Makefile y /NSPrelay/Makefile
;;;Normalmente tendriamos los buffers Makefile y Makefile<2>
;;;con esto deberiamos tener los buffers Makefile|NSdiametercom y Makefile|NSPrelay
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'uniquify)
(setq uniquify-buffer-name-style 'reverse)
(setq uniquify-separator "|")
(setq uniquify-after-kill-buffer-p t)
(setq uniquify-ignore-buffers-re "^\\*")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; recentf stuff
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Esto es una utilidad que compone una lista de los ficheros abiertos recientemente.
;;
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-exclude (append recentf-exclude '("/usr*")))
(global-set-key "\C-x\ \C-r" 'recentf-open-files)
(setq bookmark-save-flag 1)



;; ;; Esto nos permite navegar por internet mediante emacs. Util para poder ver la documentacion de python
;; ;; sin necesidad de abrir otro navegador. ( ademas si accedes mediante ssh no se abre ... )
;; (require 'w3m-load)
;; (setq browse-url-browser-function 'w3m-browse-url)
;; (autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
;; ;; optional keyboard short-cut
;; (global-set-key "\C-xm" 'browse-url-at-point)


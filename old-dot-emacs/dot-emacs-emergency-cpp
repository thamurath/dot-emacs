;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; File name: ` ~/.emacs '
;;; ---------------------
;;;
;;; If you need your own personal ~/.emacs
;;; please make a copy of this file
;;; an placein your changes and/or extension.
;;;
;;; Copyright (c) 1997-2002 SuSE Gmbh Nuernberg, Germany.
;;;
;;; Author: Werner Fink, <feedback@suse.de> 1997,98,99,2002
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;================================================
  ;; Modificaciones generales 
  ;;===============================================

  ;;Ilumina la linea actual
  (global-hl-line-mode 1)
  ;;Para activar el realzado de las coincidencias encontradas hasta el momento en las búsquedas, 
  ;;debemos poner las siguientes sentencias:
  (setq search-highlight t)
  (setq query-replace-highlight t)

   ;; Dont make backup files
  (setq make-backup-files nil) ;disable backup
  (setq backup-inhibited t)
  (setq auto-save-list-file-prefix "~/.emacs-saves/.saves-")
  (setq auto-save-default nil)

  ;; con esto deberia poner los numeros de linea 
  (global-linum-mode 1) 
  (setq linum-format "%d ") ; esto deberia poner un espacio detras del numero

  ;; Esto se supone que es para que resalte los pares de parentesis y esas cosas
  (require 'paren)
  (show-paren-mode 1)

  ;; para que la "campana" sea visual
  (setq visible-bell 1)

  ;; para que la indentacion estandar sea de 2 espacios
  (setq standard-indent 2)

  ;; Para que responda al raton ... 
  ;(mouse-wheel-mode t)

  ;; no añade lineas vacías al final
  (setq next-line-add-newlines nil)

  ;; Para que se muestre la hora en la barra de estado en formato 24h
  (setq display-time-day-and-date t)
  (setq display-time-interval 30)
  (setq display-time-24hr-format t)
  ;; Para que se muestre el tiempo en la barra de estado ( o modo)
  ;; OJO -> Primero hay que modificar las variables que afecten al modo y luego activarlo!!!
  (display-time-mode t)

  ;; keybindings para hacer que C-w borre la palabra anterior.
  ;; De esta manera no tenemos que tocar el delete casi nunca.
  ;; C-w esta por defecto puesto para kill-region, por eso remapeamos esta tb.
  ;; Nota: en los shell C-w borra la palabra anterior tb, asi que no esta tan mal
  (global-set-key "\C-w" 'backward-kill-word)
  (global-set-key "\C-x\C-k" 'kill-region)
  (global-set-key "\C-c\C-k" 'kill-region)


  ;;Modificaciones para que C-a te lleve al primer caracter no blanco de la linea
  ;;y que cuando lo presiones dos veces si que te lleve al primer caracter de la linea.

  ;; navigation
  
   (defun heretic/real-line-beginning()
     (let ((c (char-after (line-beginning-position)))
           (n (line-beginning-position)))
       (while (or (eql c ?\ )
                  (eql c ?\t))
              (incf n)
              (setq c (char-after n)))
       n))
  (defun heretic/goto-alternate-line-beginning()
    (interactive)
    (let ((n (heretic/real-line-beginning)))
      (if (eql n (point))
        (goto-char (line-beginning-position))
        (goto-char n))))
  ;; Mapeamos C-a a la nueva funcion
  (global-set-key  "\C-a" 'heretic/goto-alternate-line-beginning)

  ;;Scrolling without moving the cursor can be achieved by the functions:
  (defun scroll-down-keep-cursor () 
    ;; Scroll the text one line down while keeping the cursor 
    (interactive) 
    (scroll-down 1)) 

  (defun scroll-up-keep-cursor () 
    ;; Scroll the text one line up while keeping the cursor 
    (interactive) 
    (scroll-up 1)) 
  ;;Bind the functions to the /-key and the *-key (on the numeric keypad) with:
  ; Estas teclas no funcionan bien con un terminal porque me salen teclas de funcion 
  ;(global-set-key [kp-divide] 'scroll-down-keep-cursor) 
  ;(global-set-key [kp-multiply] 'scroll-up-keep-cursor) 
 
  ;; Esto es para que te lleve al parentesis o la llave que matche con esta 
  (global-set-key "%" 'match-paren)
  (defun match-paren (arg)
    "Go to the matching paren if on a paren; otherwise insert %."
    (interactive "p")
    (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
          ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
          (t (self-insert-command (or arg 1)))))




  ;; Requerimos el modo C/C++ para poder hacer modificaciones sobre el .
  (require 'cc-mode) ; modo para C/C++

  ;;Cuando escribimos un fichero fuente o cuando escribimos un fichero de texto suele ser interesante que el editor decida 
  ;;cuando no caben más palabras en en la línea actual y pase a la siguiente. Esta funcionalidad en emacs se conoce como 
  ;;"auto-fill". Con la siguiente sentencia indicamos que la columna donde deben terminar las líneas es la 80 y que debe 
  ;;activar el modo "auto-fill" para todos los modos derivados del modo de texto y en los modos para C y C++:
  (setq default-fill-column 80)
  ;; con esto pondriamos el modo activo para todos
  ;; (setq auto-fill-mode 1)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (add-hook 'c++-mode-hook 'turn-on-auto-fill)
  (add-hook 'c-mode-hook 'turn-on-auto-fill)

  ;;Por defecto en emacs, si vamos al final del fichero y pulsamos el cursor para ir hacia abajo emacs introduce un 
  ;;salto de linea, pero a veces este comportamiento no es el deseado. Con la siguiente sentencia podemos evitarlo:
  ; no añade lineas vacías al final
  (setq next-line-add-newlines nil)

  ;;Las siguientes líneas configuran emacs para que inserte siempre espacios y para que en los modos de C y C++ el 
  ;;tabulador sangre la línea actual (utilizando espacios), excepto en el caso de que estemos dentro de cadenas literales:
  ;; No sangra si estamos en literales
  (setq c-tab-always-indent "other") 
  ;; Espacios en vez de tabuladores
  (setq-default indent-tabs-mode nil)


  ;; Indentacion:
  (setq c-basic-offset 2) ;; numero de columnas que se indenta el codigo
  ;; Definimos el formato estandar del codigo. Para todos los modos relativos de C que no son pocos.
  (setq c-default-style '((java-mode . "java")
                          (awk-mode . "awk")
                          (other . "bsd")) ;; para todos los demas elegimos el modo bsd que es el que mas se parece ...
  )
  ;; Utilizamos espacios para indentar
  (setq indent-tabs-mode nil)

  ;;Retorno de carro cambia de línea y realiza el sangrado en la siguiente linea
  (define-key c-mode-map "\C-m" 'newline-and-indent)
  (define-key c++-mode-map "\C-m" 'newline-and-indent)
  
  ;; con la siguiente linea a;adimos el directorio y todos los subdirectorios.
  (progn (cd "/home/eojojos/Varios/emacs") (normal-top-level-add-subdirs-to-load-path))
  
  ;; esto es para que se active el resaltado de codigo
  (setq global-font-lock-mode t)

  ;; Ponemos el tema de color que queremos
  (require 'color-theme)
  (eval-after-load "color-theme"
                 '(progn
                    (color-theme-initialize)
                    ;(color-theme-gruber-darker)))
                    (color-theme-zenburn)))



  ;; Autocompletado hippie e ido
  (global-set-key "\M-_" 'hippie-expand)
  ;; ido makes competing buffers and finding files easier
  ;; http://www.emacswiki.org/cgi-bin/wiki/InteractivelyDoThings
  (require 'ido) 
  (ido-mode 'both) ;; for buffers and files
  (setq 
    ido-save-directory-list-file "~/.emacs.d/ido.last"

    ido-ignore-buffers ;; ignore these guys
    '("\\` " "^\*Mess" "^\*Back" ".*Completion" "^\*Ido" "^\*trace"

      "^\*compilation" "^\*GTAGS" "^session\.*" "^\*")
    ido-work-directory-list '("~/" "~/Desktop" "~/Documents" "~src")
    ido-case-fold  t                 ; be case-insensitive

    ido-enable-last-directory-history t ; remember last used dirs
    ido-max-work-directory-list 30   ; should be enough
    ido-max-work-file-list      50   ; remember many
    ido-use-filename-at-point nil    ; don't use filename at point (annoying)
    ido-use-url-at-point nil         ; don't use url at point (annoying)

    ido-enable-flex-matching nil     ; don't try to be too smart
    ido-max-prospects 8              ; don't spam my minibuffer
    ido-confirm-unique-completion t) ; wait for RET, even with unique completion

  ;; when using ido, the confirmation is rather annoying...
  (setq confirm-nonexistent-file-or-buffer nil)

  ;; Para poder simular las busquedas de palabras bajo el cursor
  (require 'highlight-symbol)



  ;; Esta es una funcion para poder usar astyle dentro de emacs
  (defun astyle-this-buffer (pmin pmax)
    (interactive "r")
    (shell-command-on-region pmin pmax
                             "astyle" ;; add options here...
                             (current-buffer) t 
                             (get-buffer-create "*Astyle Errors*") t)
  )
  
  ;; Set maximum level of font decoration
  (setq font-lock-maximum-decoration
        '(
            (c-mode . 3) 
            (c++-mode . 3)
         )
  )
  ;; Add some expresions to font lock 
  ;;(add-hook 'c-mode-hook
  ;;          ' (lambda ()
  ;;              (font-lock-add-keywords 
  ;;                                    '(("\\<\\(FIXME\\):" 1 font-lock-warning-face t))
  ;;              )
  ;;            )
  ;;)
  ;;(add-hook 'c++-mode-hook
  ;;          ' (lambda ()
  ;;              (font-lock-add-keywords 
  ;;                                    '(("\\<\\(FIXME\\):" 1 font-lock-warning-face t))
  ;;              )
  ;;            )
  ;;)
               
  ;;;;============================================
  ;;;; Visual bookmarks
  ;;;;============================================
  (add-to-list 'load-path "/home/eojojos/emacs-dir/visualBookmarks")

  ;; Persistence
  ;; make bookmarks persistent as default
  (setq-default bm-buffer-persistence t)

  ;; Make sure the repository is loaded as early as possible
  (setq bm-restore-repository-on-load t)
  (require 'bm)
  ;; Configuration
  ;(global-set-key (kbd "<C-f2>") 'bm-toggle)
  ;(global-set-key (kbd "<f2>")   'bm-next)
  ;(global-set-key (kbd "<S-f2>") 'bm-previous)
               
  ;; Loading the repository from file when on start up.
  (add-hook' after-init-hook 'bm-repository-load)

  ;; Restoring bookmarks when on file find.
  (add-hook 'find-file-hooks 'bm-buffer-restore)

  ;; Saving bookmark data on killing a buffer
  (add-hook 'kill-buffer-hook 'bm-buffer-save)

  ;; Saving the repository to file when on exit.
  ;; kill-buffer-hook is not called when Emacs is killed, so we
  ;; must save all bookmarks first.
  (add-hook 'kill-emacs-hook '(lambda nil
                                (bm-buffer-save-all)
                                (bm-repository-save)))

  ;; Update bookmark repository when saving the file.
  (add-hook 'after-save-hook 'bm-buffer-save)

  ;; Restore bookmarks when buffer is reverted.
  (add-hook 'after-revert-hook 'bm-buffer-restore)
  
  ;;=========================================
  ;;  GDB settings
  ;;=========================================
 
  ;; Si esta variable no es nil deberian mostrarse las ventanas al ejecutar gdb
  (setq gdb-many-windows 1)
  ;; Si esta variable es nil los buffers de comandos no apareceran
  ;; (setq gdb-use-separate-io-buffer nil)

  ;; Es comando gdb-restore-windows restaura las ventanas por defecto
  ;; El comando gdb-many-windows permite cambiar en el el layout normal de gdb y el de ventanas
  ;; Si queremos terminar la sesion de depuracion podemos matar el buffer de comandos de gdb con C-x k
  ;; Esto terminara con todos los demas buffers asociados. No es necesario matar si queremos seguir despues de 
  ;; hacer alguna modificacion. Si no lo matamos mantendra los breakpoints y otros datos.

  ;; si la variable gdb-find-source-frame no es nil y gdb se para en un sitio de donde no tiene codigo
  ;; la ventana de codigo mostrara el frame mas cercano del que si que tenga codigo

  ;; Si la variable gdb-delete-out-of-scope no es nil, gdb mantendra los watch aunque la variable salga de scope.





  ;;=============================================
  ;;  CEDET
  ;;=============================================
  ;; con esto cargamos el cedet
  (load-file "~/Varios/emacs/cedet/common/cedet.el")

  ;;habilitamos el modo semantico
  ;(semantic-mode 1)
  ;; Elegimos el modo con mas informacion para el Semantic
  ;(select only one)
  ;;(semantic-load-enable-minimum-features)
  ;;(semantic-load-enable-code-helpers)
  ;;(semantic-load-enable-gaudy-code-helpers)
  ;;(semantic-load-enable-all-exuberent-ctags-support)
  (semantic-load-enable-excessive-code-helpers)

  ;; Habilitamos el minor-mode para que parsee los includes ( creo )
  (require 'semantic-decorate-include)

  ;; Habilitamos el paquete semantic-ia para poder tener informacion adicional sobre los objetos
  (require 'semantic-ia)

  ;; Habilitamos el paquete semantic-gcc para que cedet pregunte a gcc por los system headers y los parsee.
  (require 'semantic-gcc)

  ;; Esta es otra herramienta que ofrece otras habilidades ...
  (require 'eassist)

  ;; Esto sirve para delimitar el ambito de la busqueda de simbolos
  (setq-mode-local c-mode semanticdb-find-default-throttle
                    '(project unloaded system recursive))
  (setq-mode-local c++-mode semanticdb-find-default-throttle
                    '(project unloaded system recursive))
  (setq-mode-local erlang-mode semanticdb-find-default-throttle
                    '(project unloaded system recursive))         

  ;; Esto no tengo del todo claro para que puede ser .
  ;; (custom-set-variables
  ;;   '(semantic-idle-scheduler-idle-time 3)
  ;;   '(semantic-self-insert-show-completion-function (lambda nil (semantic-ia-complete-symbol-menu (point))))
  ;;   '(global-semantic-tag-folding-mode t nil (semantic-util-modes)))
  ;; (global-semantic-folding-mode 1)
  ;; Si queremos podemos poner directorios de include adicionales de la siguiente manera.
  ;; (semantic-add-system-include "~/exp/include/boost_1_37" 'c++-mode)

  ;; ----------------------------
  ;; Opciones varias de Semantic
  ;; ----------------------------
  ;; Opciones varias
  ;;(global-semantic-idle-scheduler-mode 1) ;The idle scheduler with automatically reparse buffers in idle time.
  (global-semantic-idle-completions-mode nil) ;Display a tooltip with a list of possible completions near the cursor.
  ;;(global-semantic-idle-summary-mode 1) ;Display a tag summary of the lexical token under the cursor.
  ;;;(semantic-idle-scheduler-idle-time 1)
  ;;(global-semantic-folding-mode 1)  ;; Habilitamos el folding del codigo segun semantic

  (setq semantic-idle-scheduler-idle-time 1) ; que empiece parsear cuando lleve 1 segundo parado

  ; Definicion de las teclas para cedet
  ;;(defun my-c-mode-cedet-hook ()
  ;;  ; Utilizamos autocomplete-mode para esto.
  ;;  ; (local-set-key "." 'ac-complete-semantic) ; Para que complete cuando pongamos un punto
  ;;  ; (local-set-key ":" 'ac-complete-semantic) ; Para que complete cuando pongamos :
  ;;  ; (local-set-key ">" 'ac-complete-semantic) ; Para que complete cuando pongamos >

  ;;  ;; ahora las teclas para navegacion
  ;;  (local-set-key (kdb "C-c g") 'semantic-ia-fast-jump) ; Ir a la definicion con Ctrl-c g
  ;;)
  ;; (add-hook 'c-mode-common-hook 'my-c-mode-cedet-hook)
  ;; (add-hook 'c++-mode-common-hook 'my-c-mode-cedet-hook)


  (global-set-key "\C-cg" 'semantic-ia-fast-jump)
  (global-set-key "\C-cd" 'semantic-analyze-proto-impl-toggle)
  (global-set-key "\C-ci" 'semantic-decoration-include-visit)
  (global-set-key "\C-cs" 'semantic-symref)
  (global-set-key "\C-ct" 'semantic-mrub-switch-tags)
  (global-set-key "\C-cl" 'goto-line)
  (global-set-key "\C-ca" 'eassist-switch-h-cpp)
  (global-set-key "\C-cb" 'semantic-mrub-switch-tags)
  (global-set-key "\C-ch" 'highlight-symbol-at-point)


  ;;Habilitar semanticDB
  (require 'semanticdb)
  (global-semanticdb-minor-mode 1)


  ;; Esto se supone que debe darme soporte para cscope
  (require 'xcscope)

  ;; EDE customization
  
  (require 'semantic-lex-spp)
  (global-ede-mode 1)
  ;; cpp-tests project definition
  ;(setq RG-project
        (ede-cpp-root-project "RG"
                              :file "/home/eojojos/Work/RatingGroups/source/Imakefile"
                              :include-path '("/"
                                             )
                              ;
                              ;:system-include-path '("/home/ott/exp/include"
                              ;                       boost-base-directory)
                              ;:local-variables (list
                              ;                   (cons 'compile-command 'alexott/gen-cmake-debug-compile-string)
                              ;                 )
        )
  ;)

  
  ;; yasnippet configuration
  (add-to-list 'load-path "/home/eojojos/Varios/emacs/yasnippet/yasnippet.el")
  (require 'yasnippet)
(setq yas/root-directory "/home/eojojos/Varios/emacs/yasnippet/snippets")
  (yas/load-directory yas/root-directory)




  ;;=============================================
  ;; auto-complete mode
  ;;=============================================
  ;; Configuracion que recomienda el proceso de instalacion de la herramienta.
  (add-to-list 'load-path "/home/eojojos/.emacs.d/auto-complete/")
  (require 'auto-complete-config)
  (add-to-list 'ac-dictionary-directories "~/.emacs.d/auto-complete/ac-dict")
  (ac-config-default) ; la funcion ac-common-setup define las ac-sources, asi que la sobreescrimos.
  ;(add-to-list 'ac-sources 'ac-source-semantic)

  ;; Add ac-source-dictionary to ac-sources of all buffer
  (defun ac-common-setup ()
     (setq ac-sources '(ac-source-filename)) ; Esto es importante para el omni-completado ...
     ; El orden importa
     (setq ac-sources (append ac-sources '(ac-source-semantic
                                           ac-source-yasnippet
                                           ac-source-functions
                                           ac-source-variables
                                           ac-source-symbols
                                           ac-source-features
                                           ac-source-abbrev
                                           ac-source-words-in-same-mode-buffers
                                           ac-source-dictionary))
      )
  
   )

  ;;Esto hace que con el tabulador salte el autocompletado.
  ;(ac-set-trigger-key "TAB")

  ;; configuramos Ctrl-n y Ctrl-p para que se comporten para seleccionar los candidatos pero solo cuando este el menu.
  (setq ac-use-menu-map t)
  ;; Default settings
  (define-key ac-menu-map "\C-n" 'ac-next)
  (define-key ac-menu-map "\C-p" 'ac-previous)

  ; Se supone que esto es para que muestre la ayuda, pero no se si funciona porque no me muestra nada de nada.
  (setq ac-use-quick-help t)
  ; Delay en segundos para mostrar la ayuda en el autocompletado.
  (setq ac-quick-help-delay 1)

  ;Algunas teclas para mostrar la ayuda.
  ;; (define-key ac-mode-map (kbd "C-c h") 'ac-last-quick-help)
  (define-key ac-mode-map (kbd "C-c H") 'ac-last-help)

  ;; A;adimos semantic para las fuentes en el modo c y c++
  ;;(add-hook 'c++-mode (lambda () (add-to-list 'ac-sources 'ac-source-semantic)))
  ;;(add-hook 'c-mode (lambda () (add-to-list 'ac-sources 'ac-source-semantic)))
  ;;(add-hook 'cc-mode (lambda () (add-to-list 'ac-sources 'ac-source-semantic)))


  ;; Complete member name by C-c . for C++ mode.
  ;;(add-hook 'c-mode-hook
  ;;        (lambda ()
  ;;          (local-set-key (kbd "C-c .") 'ac-complete-semantic)
  ;;        )
  ;;)
  ;;(add-hook 'cc-mode-hook
  ;;        (lambda ()
  ;;          (local-set-key (kbd "C-c .") 'ac-complete-semantic)
  ;;        )
  ;;)
  ;;(add-hook 'c++-mode-hook
  ;;        (lambda ()
  ;;          (local-set-key (kbd "C-c .") 'ac-complete-semantic)
  ;;        )
  ;;)


  ;; Case configuration
  ;; ;; Just ignore case
  ;; (setq ac-ignore-case t)
  ;; Ignore case if completion target string doesn't include upper characters
  (setq ac-ignore-case 'smart)
  ;; ;; Distinguish case
  ;; (setq ac-ignore-case nil)

  ;(add-hook 'c-mode-common-hook '(lambda ()
  (add-hook 'c-mode-hook '(lambda ()
                                   ;; ac-omni-completion-sources is made buffer local so
                                   ;; you need to add it to a mode hook to activate on 
                                   ;; whatever buffer you want to use it with.  This
                                   ;; example uses C mode (as you probably surmised).
                                   ;; auto-complete.el expects ac-omni-completion-sources to be
                                   ;; a list of cons cells where each cell's car is a regex
                                   ;; that describes the syntactical bits you want AutoComplete
                                   ;; to be aware of. The cdr of each cell is the source that will
                                   ;; supply the completion data.  The following tells autocomplete
                                   ;; to begin completion when you type in a . or a ->
                                   (add-to-list 'ac-omni-completion-sources
                                                (cons "\\." '(ac-source-semantic)))
                                   (add-to-list 'ac-omni-completion-sources
                                                (cons "->" '(ac-source-semantic)))
                                   (add-to-list 'ac-omni-completion-sources
                                                (cons "\\:" '(ac-source-semantic)))
                                   ;; ac-sources was also made buffer local in new versions of
                                   ;; autocomplete.  In my case, I want AutoComplete to use 
                                   ;; semantic and yasnippet (order matters, if reversed snippets
                                   ;; will appear before semantic tag completions).
                                   (setq ac-sources '(ac-source-semantic ac-source-yasnippet))
                                   )
  )
                                   ;;
  ;; Esto es porque tendremos configurado el flymake para no liarla.
  (ac-flyspell-workaround)
  ;;Flymake
  (require 'flymake)


  ;; para configurar mediante make
  (setq flymake-allowed-file-name-masks
        (cons '(".+\\.cc$"
                flymake-simple-make-init
                flymake-simple-cleanup
                flymake-get-real-file-name)
              flymake-allowed-file-name-masks)
  )
;; deleting files goes to OS's trash folder
(setq delete-by-moving-to-trash t) ; "t" for true, "nil" for false
;; Make copy and paste to work with other programs
(setq x-select-enable-clipboard t)
(setq interprogram-paste-function 'x-cut-buffer-or-selection-value)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; uniquify!
;;;(es una herramienta para hacer que los nombres de los buffers cuyos nombers
;;;de fichero son iguales, sean mas descriptivos.
;;;Ej: Tenemos abiertos /NSdiametercom/Makefile y /NSPrelay/Makefile
;;;Normalmente tendriamos los buffers Makefile y Makefile<2>
;;;con esto deberiamos tener los buffers Makefile|NSdiametercom y Makefile|NSPrelay
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(require 'uniquify)
(setq uniquify-buffer-name-style 'reverse)
(setq uniquify-separator "|")
(setq uniquify-after-kill-buffer-p t)
(setq uniquify-ignore-buffers-re "^\\*")


;; recentf stuff
;; Esto es una utilidad que compone una lista de los ficheros abiertos recientemente.
;;
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 25)
(setq recentf-exclude (append recentf-exclude '("/usr*")))
(global-set-key "\C-x\ \C-r" 'recentf-open-files)
(setq bookmark-save-flag 1)

;; Autopair configuration
(require 'autopair)
(autopair-global-mode) ;; to enable in all buffers
(setq autopair-autowrap t) ;;Esto es para que ponga el delimitador alrededor de una palabra que tengamos seleccionada.
(setq autopair-blink t) 

;; Para que funcione con el triple quote de python
(add-hook 'python-mode-hook
          #'(lambda ()
              (setq autopair-handle-action-fns
                    (list #'autopair-default-handle-action
                          #'autopair-python-triple-quote-action))))
;; Nuevos caracteres para hacer autopair en c++ ( solo en codigo )
(add-hook 'c-mode-common-hook
          #'(lambda ()
              (push '(?< . ?>)
                    (getf autopair-extra-pairs :code))))

;; Esto nos permite navegar por internet mediante emacs. Util para poder ver la documentacion de python
;; sin necesidad de abrir otro navegador. ( ademas si accedes mediante ssh no se abre ... )
(require 'w3m-load)
(setq browse-url-browser-function 'w3m-browse-url)
(autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
;; optional keyboard short-cut
(global-set-key "\C-xm" 'browse-url-at-point)

(autoload 'python-mode "python-mode" "Python Mode." t)
(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
(add-to-list 'interpreter-mode-alist '("ipython" . python-mode))

  ;;Cargamos el fichero de configuracion para python
;;(load-library "init_python")

  ;;Some python mode configurations
;;   (require 'python)

;;   (autoload 'python-mode "python-mode" "Python Mode." t)
;;   (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
;;   (add-to-list 'interpreter-mode-alist '("python" . python-mode))

;;   ;;Retorno de carro cambia de línea y realiza el sangrado en la siguiente linea
;;   (define-key python-mode-map "\C-m" 'newline-and-indent)
;;   ;; Pymacs configuration
;;   ;;
;;   (autoload 'pymacs-apply "pymacs")
;;   (autoload 'pymacs-call "pymacs")
;;   (autoload 'pymacs-eval "pymacs" nil t)
;;   (autoload 'pymacs-exec "pymacs" nil t)
;;   (autoload 'pymacs-load "pymacs" nil t)
;;   ;;(eval-after-load "pymacs"
;;   ;;;;  '(add-to-list 'pymacs-load-path YOUR-PYMACS-DIRECTORY"))
;;   ;;;
;;   ;;;


;;   ;;; Some rope configuration

;;   (setq ropemacs-enable-shortcuts nil) ; esto evita que sobreescriba los keybindings
;;   (setq ropemacs-local-prefix "C-c C-p") ; esto no tengo claro para que es, pero esto esta mapeado a una cosa inutil en modo python.
;;   (require 'pymacs)
;;   (pymacs-load "ropemacs" "rope-")


;;   (defvar ac-source-pysmell
;;     '((candidates
;;         . (lambda ()
;;             (require 'pysmell)
;;             (pysmell-get-all-completions))))
;;     "Source for PySmell")

;; (add-hook 'python-mode-hook
;;           '(lambda ()             
;;              (set (make-local-variable 'ac-sources) (append ac-sources '(ac-source-pysmell)))))


;; (ac-ropemacs-initialize)
;; (add-hook 'python-mode-hook
;;           (lambda ()
;;             (add-to-list 'ac-sources 'ac-source-ropemacs)))

;;  ;; Autocomplete configuration para python-mode
;;  ;;
;;  (add-hook 'python-mode-hook '(lambda ()
;;                                   ;; ac-omni-completion-sources is made buffer local so
;;                                   ;; you need to add it to a mode hook to activate on 
;;                                   ;; whatever buffer you want to use it with.  This
;;                                   ;; example uses C mode (as you probably surmised).
;;                                   ;; auto-complete.el expects ac-omni-completion-sources to be
;;                                   ;; a list of cons cells where each cell's car is a regex
;;                                   ;; that describes the syntactical bits you want AutoComplete
;;                                   ;; to be aware of. The cdr of each cell is the source that will
;;                                   ;; supply the completion data.  The following tells autocomplete
;;                                   ;; to begin completion when you type in a . or a ->
;;                                   (add-to-list 'ac-omni-completion-sources
;;                                                (cons "\\." '(ac-source-semantic)))
;;                                   ;; ac-sources was also made buffer local in new versions of
;;                                   ;; autocomplete.  In my case, I want AutoComplete to use 
;;                                   ;; semantic and yasnippet (order matters, if reversed snippets
;;                                   ;; will appear before semantic tag completions).
;;                                   (setq ac-sources '(ac-source-semantic ac-source-yasnippet))
;;                                   )
;;  )
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;                                         
;;;;; Auto-completion                                                                                            
;;;;;  Integrates:                                                                                               
;;;;;   1) Rope                                                                                                  
;;;;;   2) Yasnippet                                                                                             
;;;;;   all with AutoComplete.el                                                                                 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;                                         
;;(defun prefix-list-elements (list prefix)
;;  (let (value)
;;    (nreverse
;;     (dolist (element list value)
;;      (setq value (cons (format "%s%s" prefix element) value))))))
;;(defvar ac-source-rope
;;  '((candidates
;;     . (lambda ()
;;         (prefix-list-elements (rope-completions) ac-target))))
;;  "Source for Rope")
;;(defun ac-python-find ()
;;  "Python `ac-find-function'."
;;  (require 'thingatpt)
;;  (let ((symbol (car-safe (bounds-of-thing-at-point 'symbol))))
;;    (if (null symbol)
;;        (if (string= "." (buffer-substring (- (point) 1) (point)))
;;            (point)
;;          nil)
;;      symbol)))
;;(defun ac-python-candidate ()
;;  "Python `ac-candidates-function'"
;;  (let (candidates)
;;    (dolist (source ac-sources)
;;      (if (symbolp source)
;;          (setq source (symbol-value source)))
;;      (let* ((ac-limit (or (cdr-safe (assq 'limit source)) ac-limit))
;;             (requires (cdr-safe (assq 'requires source)))
;;             cand)
;;        (if (or (null requires)
;;                (>= (length ac-target) requires))
;;            (setq cand
;;                  (delq nil
;;                        (mapcar (lambda (candidate)
;;                                  (propertize candidate 'source source))
;;                                (funcall (cdr (assq 'candidates source)))))))
;;        (if (and (> ac-limit 1)
;;                 (> (length cand) ac-limit))
;;            (setcdr (nthcdr (1- ac-limit) cand) nil))
;;        (setq candidates (append candidates cand))))
;;    (delete-dups candidates)))
;;(add-hook 'python-mode-hook
;;          (lambda ()
;;                 (auto-complete-mode 1)
;;                 (set (make-local-variable 'ac-sources)
;;                      (append ac-sources '(ac-source-rope) '(ac-source-yasnippet)))
;;                 (set (make-local-variable 'ac-find-function) 'ac-python-find)
;;                 (set (make-local-variable 'ac-candidate-function) 'ac-python-candidate)
;;                 (set (make-local-variable 'ac-auto-start) nil)))

;;;;Ryan's python specific tab completion                                                                        
;;(defun ryan-python-tab ()
;;  ; Try the following:                                                                                         
;;  ; 1) Do a yasnippet expansion                                                                                
;;  ; 2) Do a Rope code completion                                                                               
;;  ; 3) Do an indent                                                                                            
;;  (interactive)
;;  (if (eql (ac-start) 0)
;;      (indent-for-tab-command)))
;;
;;(defadvice ac-start (before advice-turn-on-auto-start activate)
;;  (set (make-local-variable 'ac-auto-start) t))
;;(defadvice ac-cleanup (after advice-turn-off-auto-start activate)
;;  (set (make-local-variable 'ac-auto-start) nil))
;;
;;(define-key python-mode-map "\t" 'ryan-python-tab)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;                                         
;;; End Auto Completion                                                                                        
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; File name: ` ~/.emacs '
;;; ---------------------
;;;
;;; If you need your own personal ~/.emacs
;;; please make a copy of this file
;;; an placein your changes and/or extension.
;;;
;;; Copyright (c) 1997-2002 SuSE Gmbh Nuernberg, Germany.
;;;
;;; Author: Werner Fink, <feedback@suse.de> 1997,98,99,2002
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;================================================
  ;; Modificaciones generales 
  ;;===============================================
  ;; con la siguiente linea a;adimos el directorio y todos los subdirectorios.
  (progn (cd "/home/eojojos/Varios/emacs") (normal-top-level-add-subdirs-to-load-path))

  ;; Ponemos el tema de color que queremos
  (require 'color-theme)
  (eval-after-load "color-theme"
                 '(progn
                    (color-theme-initialize)
                    ;(color-theme-gruber-darker)))
                    (color-theme-zenburn)))

  ;; esto es para que se active el resaltado de codigo para todos los modos en los que este disponible
  (setq global-font-lock-mode t)
  ;; Set maximum level of font decoration
  (setq font-lock-maximum-decoration
        '(
            (c-mode . 3) 
            (c++-mode . 3)
            (python-mode . 3) 
         )
  )
  ;;Ilumina la linea actual
  (global-hl-line-mode 1)
  ;;Para activar el realzado de las coincidencias encontradas hasta el momento en las búsquedas, 
  ;;debemos poner las siguientes sentencias:
  (setq search-highlight t)
  (setq query-replace-highlight t)

  ;; con esto deberia poner los numeros de linea 
  (global-linum-mode 1) 
  (setq linum-format "%d ") ; esto deberia poner un espacio detras del numero

  ;; Esto se supone que es para que resalte los pares de parentesis y esas cosas
  (require 'paren)
  (show-paren-mode 1)

  ;; para que la "campana" sea visual
  (setq visible-bell 1)
  ;; no añade lineas vacías al final
  (setq next-line-add-newlines nil)

  ;; Para que se muestre la hora en la barra de estado en formato 24h
  (setq display-time-day-and-date t)
  (setq display-time-interval 30)
  (setq display-time-24hr-format t)
  ;; Para que se muestre el tiempo en la barra de estado ( o modo)
  ;; OJO -> Primero hay que modificar las variables que afecten al modo y luego activarlo!!!
  (display-time-mode t)

  ;; keybindings para hacer que C-w borre la palabra anterior.
  ;; De esta manera no tenemos que tocar el delete casi nunca.
  ;; C-w esta por defecto puesto para kill-region, por eso remapeamos esta tb.
  ;; Nota: en los shell C-w borra la palabra anterior tb, asi que no esta tan mal
  (global-set-key "\C-w" 'backward-kill-word)
  (global-set-key "\C-x\C-k" 'kill-region)
  (global-set-key "\C-c\C-k" 'kill-region)
  ;;Modificaciones para que C-a te lleve al primer caracter no blanco de la linea
  ;;y que cuando lo presiones dos veces si que te lleve al primer caracter de la linea.

  ;; navigation
  
   (defun heretic/real-line-beginning()
     (let ((c (char-after (line-beginning-position)))
           (n (line-beginning-position)))
       (while (or (eql c ?\ )
                  (eql c ?\t))
              (incf n)
              (setq c (char-after n)))
       n))
  (defun heretic/goto-alternate-line-beginning()
    (interactive)
    (let ((n (heretic/real-line-beginning)))
      (if (eql n (point))
        (goto-char (line-beginning-position))
        (goto-char n))))
  ;; Mapeamos C-a a la nueva funcion
  (global-set-key  "\C-a" 'heretic/goto-alternate-line-beginning)

  ;; Esto es para que te lleve al parentesis o la llave que matche con esta 
  (global-set-key "%" 'match-paren)
  (defun match-paren (arg)
    "Go to the matching paren if on a paren; otherwise insert %."
    (interactive "p")
    (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
          ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
          (t (self-insert-command (or arg 1)))))

;;Autofill mode
;;Cuando escribimos un fichero fuente o cuando escribimos un fichero de texto suele ser interesante que el editor decida 
;;cuando no caben más palabras en en la línea actual y pase a la siguiente. Esta funcionalidad en emacs se conoce como 
;;"auto-fill". Con la siguiente sentencia indicamos que la columna donde deben terminar las líneas es la 80 y que debe 
;;activar el modo "auto-fill" para todos los modos derivados del modo de texto y en los modos para C y C++:
(setq default-fill-column 80)
;; con esto pondriamos el modo activo para todos
;; (setq auto-fill-mode 1)
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'c++-mode-hook 'turn-on-auto-fill)
(add-hook 'c-mode-hook 'turn-on-auto-fill)
(add-hook 'python-mode-hook 'turn-on-auto-fill)

;;Por defecto en emacs, si vamos al final del fichero y pulsamos el cursor para ir hacia abajo emacs introduce un 
;;salto de linea, pero a veces este comportamiento no es el deseado. Con la siguiente sentencia podemos evitarlo:
;; no añade lineas vacías al final
(setq next-line-add-newlines nil)

;; Espacios en vez de tabuladores
(setq-default indent-tabs-mode nil) ;; nota:setq-default solo modifica el valor de la variable en los buffers que no tienen un valor para ella.


;; Autopair configuration
(require 'autopair)
(autopair-global-mode) ;; to enable in all buffers
(setq autopair-autowrap t) ;;Esto es para que ponga el delimitador alrededor de una palabra que tengamos seleccionada.
(setq autopair-blink t) 

;; Para que funcione con el triple quote de python
(add-hook 'python-mode-hook
          #'(lambda ()
              (setq autopair-handle-action-fns
                    (list #'autopair-default-handle-action
                          #'autopair-python-triple-quote-action))))
;; Nuevos caracteres para hacer autopair en c++ ( solo en codigo )
(add-hook 'c++-mode-hook
          #'(lambda ()
              (push '(?< . ?>)
                    (getf autopair-extra-pairs :code))))

  ;; Autocompletado hippie e ido
  (global-set-key "\M- " 'hippie-expand)
  ;; ido makes competing buffers and finding files easier
  ;; http://www.emacswiki.org/cgi-bin/wiki/InteractivelyDoThings
  (require 'ido) 
  (ido-mode 'both) ;; for buffers and files
  (setq 
    ido-save-directory-list-file "~/.emacs.d/ido.last"

    ido-ignore-buffers ;; ignore these guys
    '("\\` " "^\*Mess" "^\*Back" ".*Completion" "^\*Ido" "^\*trace"

      "^\*compilation" "^\*GTAGS" "^session\.*" "^\*")
    ido-work-directory-list '("~/" "~/Desktop" "~/Documents" "~src")
    ido-case-fold  t                 ; be case-insensitive

    ido-enable-last-directory-history t ; remember last used dirs
    ido-max-work-directory-list 30   ; should be enough
    ido-max-work-file-list      50   ; remember many
    ido-use-filename-at-point nil    ; don't use filename at point (annoying)
    ido-use-url-at-point nil         ; don't use url at point (annoying)

    ido-enable-flex-matching nil     ; don't try to be too smart
    ido-max-prospects 8              ; don't spam my minibuffer
    ido-confirm-unique-completion t) ; wait for RET, even with unique completion

  ;; when using ido, the confirmation is rather annoying...
  (setq confirm-nonexistent-file-or-buffer nil)



  ;; Para poder simular las busquedas de palabras bajo el cursor. Resalta la busqueda actual
  (require 'highlight-symbol)
;; TODO: asignarle teclas a las funciones siguientes.

;Use C-f3 to toggle highlighting of the symbol at point throughout the current buffer. 
;Use highlight-symbol-mode to keep the symbol at point always highlighted.
;The functions highlight-symbol-next, highlight-symbol-prev, highlight-symbol-next-in-defun and
; highlight-symbol-prev-in-defun allow for cycling through the locations of any symbol at point. 
;When highlight-symbol-on-navigation-p is set, highlighting is triggered regardless of highlight-symbol-idle-delay.

  ;; Esta es una funcion para poder usar astyle dentro de emacs
(defun astyle-this-buffer (pmin pmax)
    (interactive "r")
    (shell-command-on-region pmin pmax
                             "astyle" ;; add options here...
                             (current-buffer) t 
                             (get-buffer-create "*Astyle Errors*") t)
  )

;;----------------------------------------------          
;; Funcion para modificaciones tipicas de python
;;----------------------------------------------
(defun my-python-mode-hook ()
    ;;; bind RET to py-newline-and-indent
  (define-key python-mode-map (kbd "C-m") 'newline-and-indent)
)
(add-hook 'python-mode-hook 'my-python-mode-hook )

;;----------------------------------------------          
;; Funcion para modificaciones tipicas de python
;;----------------------------------------------
(defun my-cpp-mode-hook ()
  ;; Asignamos el retorno de carro al newline-and-indent para que las nuevas lineas las inserte indentadas directamente
  (define-key c-mode-map (kbd "C-m") 'newline-and-indent)
  (define-key c++-mode-map (kbd "C-m") 'newline-and-indent)
  ;; Indentacion:
  (setq c-basic-offset 2) ;; numero de columnas que se indenta el codigo
  ;; Definimos el formato estandar del codigo. Para todos los modos relativos de C que no son pocos.
  (setq c-default-style '((java-mode . "java")
                          (awk-mode . "awk")
                          (other . "bsd")) ;; para todos los demas elegimos el modo bsd que es el que mas se parece ...
  )
  ;; Utilizamos espacios para indentar
  (setq indent-tabs-mode nil)
)
(add-hook 'c-mode-hook 'my-cpp-mode-hook )
(add-hook 'c++-mode-hook 'my-cpp-mode-hook )